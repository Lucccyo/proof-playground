(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require HighOrd.
Require int.Int.
Require map.Map.

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | ref'mk : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments ref'mk {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | ref'mk x => x
  end.

Axiom array : forall (a:Type), Type.
Parameter array_WhyType :
  forall (a:Type) {a_WT:WhyType a}, WhyType (array a).
Existing Instance array_WhyType.

Parameter elts:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z -> a.

Parameter length:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z.

Axiom array'invariant :
  forall {a:Type} {a_WT:WhyType a},
  forall (self:array a), (0%Z <= (length self))%Z.

(* Why3 assumption *)
Definition mixfix_lbrb {a:Type} {a_WT:WhyType a} (a1:array a)
    (i:Numbers.BinNums.Z) : a :=
  elts a1 i.

Parameter mixfix_lblsmnrb:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z -> a ->
  array a.

Axiom mixfix_lblsmnrb'spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:array a) (i:Numbers.BinNums.Z) (v:a),
  ((length (mixfix_lblsmnrb a1 i v)) = (length a1)) /\
  ((elts (mixfix_lblsmnrb a1 i v)) = (map.Map.set (elts a1) i v)).

Parameter make:
  forall {a:Type} {a_WT:WhyType a}, Numbers.BinNums.Z -> a -> array a.

Axiom make_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (n:Numbers.BinNums.Z) (v:a), (0%Z <= n)%Z ->
  (forall (i:Numbers.BinNums.Z), (0%Z <= i)%Z /\ (i < n)%Z ->
   ((mixfix_lbrb (make n v) i) = v)) /\
  ((length (make n v)) = n).

(* Why3 goal *)
Theorem max_sum'vc :
  forall (a:array Numbers.BinNums.Z) (n:Numbers.BinNums.Z),
  (n = (length a)) /\
  (forall (i:Numbers.BinNums.Z), (0%Z <= i)%Z /\ (i < n)%Z ->
   (0%Z <= (mixfix_lbrb a i))%Z) ->
  let o := (n - 1%Z)%Z in
  ((0%Z <= (o + 1%Z)%Z)%Z ->
   (0%Z < (0%Z * 0%Z)%Z)%Z /\
   (forall (max:Numbers.BinNums.Z) (sum:Numbers.BinNums.Z),
    (forall (i:Numbers.BinNums.Z),
     ((0%Z <= i)%Z /\ (i <= o)%Z) /\ (sum < (max * i)%Z)%Z ->
     ((0%Z <= i)%Z /\ (i < (length a))%Z) /\
     (let o1 := mixfix_lbrb a i in
      ((max < o1)%Z ->
       ((0%Z <= i)%Z /\ (i < (length a))%Z) /\
       (forall (max1:Numbers.BinNums.Z), (max1 = (mixfix_lbrb a i)) ->
        ((0%Z <= i)%Z /\ (i < (length a))%Z) /\
        (forall (sum1:Numbers.BinNums.Z),
         (sum1 = (sum + (mixfix_lbrb a i))%Z) ->
         (sum1 < (max1 * (i + 1%Z)%Z)%Z)%Z))) /\
      (~ (max < o1)%Z ->
       ((0%Z <= i)%Z /\ (i < (length a))%Z) /\
       (forall (sum1:Numbers.BinNums.Z),
        (sum1 = (sum + (mixfix_lbrb a i))%Z) ->
        (sum1 < (max * (i + 1%Z)%Z)%Z)%Z)))) /\
    ((sum < (max * (o + 1%Z)%Z)%Z)%Z -> (sum <= (n * max)%Z)%Z))) /\
  (((o + 1%Z)%Z < 0%Z)%Z -> (0%Z <= (n * 0%Z)%Z)%Z).
Proof.
intros a n (h1,h2) o.

Qed.

